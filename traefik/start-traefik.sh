#!/usr/bin/env bash
set -euo pipefail

# -----------------------
# Config
# -----------------------
# Render will set PORT; default to 8080 for local dev
PORT="${PORT:-8080}"
ROOT="$(cd "$(dirname "$0")" && pwd)"

TRA_BIN="$ROOT/traefik"
# STATIC_CFG will be generated by this script at runtime
STATIC_CFG="$ROOT/traefik.yml"
TEMPLATE="$ROOT/dynamic.yml.template"
DYNAMIC_CFG="$ROOT/dynamic.yml"
TARBALL_URL="https://github.com/traefik/traefik/releases/download/v3.5.1/traefik_v3.5.1_linux_amd64.tar.gz"
TMP_TGZ="$ROOT/traefik.tgz"

# Enable dashboard locally by setting ENABLE_DASHBOARD=true
# Default is disabled (suitable for Render)
ENABLE_DASHBOARD="${ENABLE_DASHBOARD:-false}"

echo "start-traefik.sh: ROOT=$ROOT, PORT=$PORT, ENABLE_DASHBOARD=$ENABLE_DASHBOARD"
echo "Listing files in $ROOT:"
ls -la "$ROOT" || true

# -----------------------
# Ensure Traefik binary
# -----------------------
if [ ! -x "$TRA_BIN" ]; then
  echo "Traefik binary not found at $TRA_BIN â€” downloading..."
  if ! curl -sSL --fail "$TARBALL_URL" -o "$TMP_TGZ"; then
    echo "ERROR: failed to download $TARBALL_URL"
    exit 1
  fi

  echo "Tarball contents (diagnostic):"
  tar -tzf "$TMP_TGZ" || true

  echo "Extracting binary to $TRA_BIN ..."
  tar -xzf "$TMP_TGZ" -C "$ROOT" traefik || {
    echo "ERROR: tar extraction failed or 'traefik' not present in archive"
    rm -f "$TMP_TGZ"
    exit 1
  }

  chmod +x "$TRA_BIN" || true
  rm -f "$TMP_TGZ"
  echo "Traefik binary is ready at $TRA_BIN"
else
  echo "Traefik binary already present and executable at $TRA_BIN"
fi

# -----------------------
# Generate static traefik.yml depending on ENABLE_DASHBOARD
# -----------------------
echo "Generating static configuration ($STATIC_CFG) ..."

if [ "$ENABLE_DASHBOARD" = "true" ]; then
  # Local dev: enable dashboard on a separate port (8081) to avoid conflicts.
  cat > "$STATIC_CFG" <<EOF
api:
  dashboard: true
  insecure: true

log:
  level: DEBUG

# Access log is handy for local debugging
accessLog: {}

# We'll bind 'web' to \$PORT and 'traefik' (dashboard) to 8081
entryPoints:
  web:
    address: ":${PORT}"
  traefik:
    address: ":8081"

providers:
  file:
    filename: ./dynamic.yml
    watch: true
EOF
  echo "Wrote static config with dashboard enabled (traefik on :8081, web on :${PORT})"
else
  # Production/Render: disable dashboard and bind only web to \$PORT
  cat > "$STATIC_CFG" <<EOF
api:
  dashboard: false
  insecure: false

log:
  level: DEBUG

providers:
  file:
    filename: ./dynamic.yml
    watch: true
EOF
  echo "Wrote static config with dashboard disabled (only web to be bound via CLI)"
fi

# -----------------------
# Render dynamic.yml from template
# -----------------------
if [ ! -f "$TEMPLATE" ]; then
  echo "ERROR: $TEMPLATE not found in $ROOT"
  ls -la "$ROOT"
  exit 1
fi

echo "Rendering $DYNAMIC_CFG from $TEMPLATE ..."
if command -v envsubst >/dev/null 2>&1; then
  envsubst < "$TEMPLATE" > "$DYNAMIC_CFG"
else
  python3 - <<PY > "$DYNAMIC_CFG"
import os, re, sys
tmpl = open(os.path.expanduser("$TEMPLATE"), "r", encoding="utf-8").read()
def repl(m):
    var = m.group('var')
    default = m.group('def') if m.group('def') is not None else ''
    return os.environ.get(var, default)
pattern = re.compile(r'\$\{(?P<var>[A-Za-z_][A-Za-z0-9_]*)' +
                     r'(?:\:-(?P<def>[^}]*))?\}')
sys.stdout.write(pattern.sub(repl, tmpl))
PY
fi

echo "Rendered $DYNAMIC_CFG (first 80 lines):"
sed -n '1,80p' "$DYNAMIC_CFG" || true
echo "---- end rendered dynamic.yml ----"

# -----------------------
# Final checks
# -----------------------
if [ ! -x "$TRA_BIN" ]; then
  echo "ERROR: traefik binary not executable at $TRA_BIN"
  ls -la "$ROOT"
  exit 1
fi
if [ ! -f "$STATIC_CFG" ]; then
  echo "ERROR: static config not created at $STATIC_CFG"
  exit 1
fi
if [ ! -f "$DYNAMIC_CFG" ]; then
  echo "ERROR: rendered dynamic config not created at $DYNAMIC_CFG"
  exit 1
fi

# -----------------------
# Kill any existing processes on $PORT (avoid bind errors)
# -----------------------
if command -v lsof >/dev/null 2>&1; then
  PIDS="$(lsof -t -i:${PORT} || true)"
  if [ -n "$PIDS" ]; then
    echo "Killing processes listening on port ${PORT}: $PIDS"
    kill $PIDS || true
    sleep 1
    PIDS="$(lsof -t -i:${PORT} || true)"
    if [ -n "$PIDS" ]; then
      echo "Force killing remaining: $PIDS"
      kill -9 $PIDS || true
    fi
  fi
fi

# If dashboard enabled and listening on 8081, also kill it to avoid conflicts
if [ "$ENABLE_DASHBOARD" = "true" ]; then
  if command -v lsof >/dev/null 2>&1; then
    PIDS2="$(lsof -t -i:8081 || true)"
    if [ -n "$PIDS2" ]; then
      echo "Killing processes listening on port 8081 (dashboard): $PIDS2"
      kill $PIDS2 || true
      sleep 1
      PIDS2="$(lsof -t -i:8081 || true)"
      if [ -n "$PIDS2" ]; then
        echo "Force killing remaining on 8081: $PIDS2"
        kill -9 $PIDS2 || true
      fi
    fi
  fi
fi

# -----------------------
# Start Traefik
# -----------------------
echo "Starting Traefik..."

if [ "$ENABLE_DASHBOARD" = "true" ]; then
  # Bind both web and traefik entryPoints (traefik already defined in static config, but pass web too)
  echo "Executing: $TRA_BIN --configFile=$STATIC_CFG --providers.file.filename=$DYNAMIC_CFG --entryPoints.web.address=:${PORT} --entryPoints.traefik.address=:8081 --log.level=DEBUG"
  exec "$TRA_BIN" \
    --configFile="$STATIC_CFG" \
    --providers.file.filename="$DYNAMIC_CFG" \
    --providers.file.watch=true \
    --entryPoints.web.address=":${PORT}" \
    --entryPoints.traefik.address=":8081" \
    --log.level=DEBUG
else
  # No dashboard: bind both 'web' and 'http' entryPoints to ${PORT}
  echo "Executing: $TRA_BIN --configFile=$STATIC_CFG --providers.file.filename=$DYNAMIC_CFG --entryPoints.web.address=:${PORT} --entryPoints.http.address=:${PORT} --log.level=DEBUG"
  exec "$TRA_BIN" \
    --configFile="$STATIC_CFG" \
    --providers.file.filename="$DYNAMIC_CFG" \
    --providers.file.watch=true \
    --entryPoints.web.address=":${PORT}" \
    --entryPoints.http.address=":${PORT}" \
    --log.level=DEBUG

fi
